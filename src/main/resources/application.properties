spring.application.name=axumawit

spring.datasource.url=${DATABASE_URL}
spring.datasource.username=${DATABASE_USERNAME}
spring.datasource.password=${DATABASE_PASSWORD}
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true


security.secret.key=${SECURITY_KEY}
after.login.redirect=${AFTER_LOGIN_REDIRECT_URL}

spring.config.import=file:.env[.properties]
# Google OAuth2 client configuration
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_OAUTH_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_OAUTH_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri=${GOOGLE_OAUTH_REDIRECT_URI}
spring.security.oauth2.client.registration.google.scope=openid,profile,email

# Base URL of your application
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://openidconnect.googleapis.com/v1/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# for using of storage 
# Change to "s3" for AWS S3
storage.type=local
# storage.type=s3
app.upload.dir=${IMAGE_STORAGE}
aws.upload.dir=${AWS_S3_UPLOAD_DIR}
amazon.access.key=${AWS_ACCESS_KEY}
amazon.secret.key=${AWS_SECRET_KEY}
aws.s3.region=${AWS_REGION}
aws.s3.bucket.name=${AWS_BUCKET_NAME}
aws.default.profile.pic=${AWS_DEFAULT_PIC}